version: '3'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}
  static_volume: {}
  media_volume: {}

services:
  django:
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: exoset_production_django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    volumes:
      - static_volume:/app/static
      - media_volume:/app/exoset/media
    expose:
      - 8000
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: exoset_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data:Z
      - production_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.production/.postgres

  #traefik:
  #  build:
  #    context: .
  #    dockerfile: ./compose/production/traefik/Dockerfile
  #  image: exoset_production_traefik
  #  depends_on:
  #    - django
  #  volumes:
  #    - production_traefik:/etc/traefik/acme:z
  #  ports:
  #    - "0.0.0.0:80:80"
  #    - "0.0.0.0:443:443"

  nginx:
    build:
      context: .
      dockerfile: ./compose/production/nginx/Dockerfile
    ports:
      - 80:80
      - 443:443
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./compose/production/nginx:/etc/nginx/conf.d
      - ./compose/production/nginx/certbot/conf:/etc/letsencrypt
      - ./compose/production/nginx/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - django

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./compose/production/nginx/certbot/conf:/etc/letsencrypt
      - ./compose/production/nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  redis:
    image: redis:5.0

  #awscli:
  #  build:
  #    context: .
  #    dockerfile: ./compose/production/aws/Dockerfile
  #  env_file:
  #    - ./.envs/.production/.django
  #  volumes:
  #    - production_postgres_data_backups:/backups:z
